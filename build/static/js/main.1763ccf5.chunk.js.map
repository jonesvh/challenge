{"version":3,"sources":["Styles/global.ts","Pages/ListLeadPage/styles.ts","Components/PageHeader/styles.ts","Components/PageHeader/index.tsx","Components/Input/styles.ts","Components/Input/index.tsx","Components/Button/styles.ts","Components/Button/index.tsx","Services/api.ts","utils/numberOnly.ts","Context/Leads.js","Components/ListForm/styles.ts","Components/ListForm/index.tsx","Components/LinkButton/styles.ts","Components/LinkButton/index.tsx","utils/cpfMask.ts","Pages/ListLeadPage/index.tsx","Pages/CreateLeadPage/styles.ts","Components/Select/styles.ts","Components/Select/index.tsx","Components/AddForm/styles.ts","Components/AddForm/index.tsx","Pages/CreateLeadPage/index.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","Container","styled","div","Content","Table","props","justifycontent","table","Tbody","tbody","TrBody","tr","ThHead","th","StyledLink","Link","Header","Title","img","PageHeader","title","className","InputContainer","InputItem","input","bordercolor","Label","label","StyleInputMask","InputMask","Input","name","flex","type","disabled","mask","error","rest","style","htmlFor","id","ButtonContainer","ButtonItem","button","bgcolor","bgcolorhover","Button","api","axios","create","baseURL","NumberOnly","string","replace","LeadsContext","createContext","LeadsProvider","children","useState","leads","setLeads","Provider","value","useLeads","context","useContext","Error","StyledForm","form","Row","Column","ListForm","handleCreateQuery","values","query","cpf","handleFetchAllLeads","get","headers","then","response","data","formik","useFormik","initialValues","onSubmit","handleFetchFilterLeads","useEffect","handleSubmit","autoComplete","onChange","handleChange","ContainerButtonNew","LinkButton","to","CPFMask","slice","ListLeadPage","handleDeleteLead","delete","length","map","lead","key","pathname","state","padding","width","height","cursor","paddingLeft","onClick","e","email","nome","SelectContainer","StyledSelect","select","Select","options","option","AddForm","location","useLocation","history","useHistory","isUpdate","setIsUpdate","labelButton","setLabelButton","maritalStatus","spouseName","setInitialValues","nomeEstadoCivil","maritalStatusOptions","setMaritalStatusOptions","enableReinitialize","validationSchema","yup","shape","required","when","is","handleUpdateLead","handleCreateNewLead","put","estadoCivil","nomeConjugue","alert","push","catch","err","console","log","post","updateSpouseName","undefined","dados","onBlur","handleBlur","touched","errors","index","toString","CreateLeadPage","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1763ccf5.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    * {\r\n        margin: 0;\r\n        padding: 5px;\r\n        box-sizing: border-box;\r\n    }\r\n    body {\r\n        background: #224D74;;\r\n        font-size: 14px;\r\n        font-family: Arial;\r\n    }\r\n`;","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IpropsRowColumn {\r\n    justifycontent?: string;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content:center\r\n`\r\nconst Content = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100vw;\r\n    max-width: 700px;\r\n    padding:0\r\n`\r\nconst Label = styled.div`\r\n    color: #020202;\r\n    font-weight: 600;\r\n    font-size: 15px\r\n`\r\nconst Filter = styled.div`\r\n    background: #FFFFFF;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 13px;\r\n    margin-top: 15px;\r\n`\r\n\r\nconst Row = styled.div<IpropsRowColumn> `\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: ${ props => props.justifycontent};\r\n    padding: 0;\r\n`\r\n\r\nconst Column = styled.div<IpropsRowColumn> `\r\n    display: flex;\r\n    justify-content: ${ props => props.justifycontent};\r\n    width: 100%;\r\n    padding: 0;\r\n`\r\nconst Table = styled.table`\r\n    border: 0;\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n`\r\nconst Tbody = styled.tbody`\r\n    background: #FFF;\r\n    border-spacing: 1px;\r\n    \r\n`\r\nconst TrBody = styled.tr`\r\n    border-bottom: 1px solid #224D74;\r\n`\r\nconst ThHead = styled.th`\r\n    text-align: left;\r\n    color: #FFF;\r\n    font-weight: 500;\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n    padding: 0;\r\n    &:visited {\r\n        color: #111;\r\n    }\r\n`\r\n\r\nexport { Container, Content, Label, Filter, Row, Column, Table, Tbody, ThHead, TrBody, StyledLink };","import styled from 'styled-components';\r\n\r\n const Header = styled.div `\r\n    margin-bottom: 30px;\r\n`\r\nconst Image = styled.img `\r\n    width: 200px;\r\n`\r\nconst Title = styled.div`\r\n    color: #FFFFFF;\r\n    font-size: 24px;\r\n`\r\nexport { Header, Image, Title}","import React from 'react';\r\nimport logo from '../../Assets/Images/logo.svg'\r\n\r\nimport { Header, Image, Title } from './styles'\r\n\r\ninterface TitleProps {\r\n    title: string;\r\n}\r\n\r\nconst PageHeader: React.FC<TitleProps> = ({title}) => {\r\n    return (\r\n        <>\r\n            <Header>\r\n                {/* <Image src={logo} alt=\"logo\" /> */}\r\n            </Header>\r\n\r\n            <Title className=\"label\">{title}</Title>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PageHeader;","import styled from 'styled-components';\r\n\r\nimport InputMask from 'react-input-mask';\r\n\r\ninterface Iprops {\r\n    bordercolor: string;\r\n}\r\n\r\nconst InputContainer = styled.div `\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst InputItem = styled.input<Iprops> `\r\n    border-color: ${ props => props.bordercolor || \"#DCDCDC\"};\r\n    border-width: 1px;\r\n    border-radius: 5px;\r\n    border-style: solid;\r\n    outline: 0;\r\n    color: #3C3C3C !important;\r\n    &:disabled {\r\n        cursor: not-allowed;\r\n        background: #D4D4D4;\r\n    };\r\n    \r\n`\r\nconst Label = styled.label`\r\n    color: #020202;\r\n    font-size: 13px\r\n`\r\nconst StyleInputMask = styled(InputMask)<Iprops> `\r\n    border-color: ${ props => props.bordercolor || \"#DCDCDC\"};\r\n    border-width: 1px;\r\n    border-radius: 5px;\r\n    border-style: solid;\r\n    outline: 0;\r\n    color: #3C3C3C !important;\r\n    &:disabled {\r\n        cursor: not-allowed;\r\n        background: #D4D4D4;\r\n    };\r\n    \r\n`\r\n\r\nexport { InputContainer, InputItem, Label, StyleInputMask };","import React, { InputHTMLAttributes } from 'react';\r\n\r\nimport { InputContainer, InputItem, Label, StyleInputMask } from './styles'\r\n\r\n\r\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    name: string;\r\n    label: string;\r\n    type?: string;\r\n    flex?: number;\r\n    disabled?: boolean;\r\n    mask?: string;\r\n    error?: boolean;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ name, label, flex, type, disabled, mask, error, ...rest }) => {\r\n    \r\n    let bordercolor = \"\"\r\n    if (error) {\r\n        bordercolor = \"#ff0000\"\r\n    }\r\n    return (\r\n        <InputContainer style={{ flex: flex }}>\r\n            <Label htmlFor={name}>{label}</Label>\r\n            {/* <InputItem type={type ? type : \"text\"} id={name} {...rest} disabled={disabled} bordercolor={bordercolor} /> */}\r\n            {!mask ?\r\n                <InputItem type={type ? type : \"text\"} id={name} {...rest} disabled={disabled} bordercolor={bordercolor} />\r\n                :\r\n                <StyleInputMask type={type ? type : \"text\"} id={name} {...rest} mask=\"999.999.999-99\" />\r\n            }\r\n        </InputContainer>\r\n    )\r\n}\r\n\r\nexport default Input;","import styled from 'styled-components';\r\n\r\ninterface Iprops {\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n}\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    \r\n`\r\n\r\nconst ButtonItem = styled.button<Iprops> `\r\n    border-radius: 3px;\r\n    outline:0;\r\n    border: 0 none;\r\n    background: ${ props => props.bgcolor};\r\n    font-weight: 600;\r\n    height:35px;\r\n    width: 6rem;\r\n    cursor: pointer;\r\n    font-size:14px;\r\n    &:hover {\r\n        background: ${ props => props.bgcolorhover};\r\n    }\r\n`\r\n\r\nexport { ButtonContainer, ButtonItem };","import React, { ButtonHTMLAttributes } from 'react';\r\n\r\nimport { ButtonContainer, ButtonItem } from './styles'\r\n\r\ntype Type = \"button\" | \"submit\" | \"reset\";\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    label: string;\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n    type?: Type;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ label, bgcolor, bgcolorhover, type, ...rest }) => {\r\n    return (\r\n        <ButtonContainer>\r\n            <ButtonItem type={type ? type : \"button\"} {...rest} bgcolor={bgcolor} bgcolorhover={bgcolorhover}>\r\n                {label}\r\n            </ButtonItem>\r\n        </ButtonContainer>\r\n    )\r\n}\r\n\r\nexport default Button;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:3333\"\r\n})\r\n\r\nexport default api;","function NumberOnly(string) {\r\n    const number = string.replace(/\\D+/g, '')\r\n    return number\r\n}\r\n\r\nexport default NumberOnly;","import React, { createContext, useState, useContext } from \"react\";\r\n\r\nconst LeadsContext = createContext();\r\n\r\nexport default function LeadsProvider({ children }) {\r\n  const [leads, setLeads] = useState(0);\r\n\r\n  return (\r\n    <LeadsContext.Provider\r\n      value={{\r\n        leads,\r\n        setLeads\r\n      }}\r\n    >\r\n      {children}\r\n    </LeadsContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useLeads() {\r\n  const context = useContext(LeadsContext);\r\n  if (!context) throw new Error(\"useLeads must be used within a LeadsProvider\");\r\n  const { leads, setLeads } = context;\r\n  return { leads, setLeads };\r\n}","import styled from 'styled-components'\r\n\r\ninterface Iprops {\r\n    justifycontent?: string;\r\n}\r\n\r\nconst StyledForm = styled.form `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: #FFFFFF;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 13px;\r\n    margin-top: 15px;\r\n    padding:5px;\r\n    autocomplete:\"off\"\r\n`\r\n\r\nconst Row = styled.div<Iprops> `\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: ${ props => props.justifycontent};\r\n    padding: 0;\r\n`\r\n\r\nconst Column = styled.div<Iprops> `\r\n    display: flex;\r\n    justify-content: ${ props => props.justifycontent};\r\n    width: 100%;\r\n    padding: 0;\r\n`\r\nconst Label = styled.div`\r\n    color: #020202;\r\n    font-weight: 600;\r\n    font-size: 15px\r\n`\r\n\r\nexport { StyledForm, Row, Label, Column }","import React, { useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport Input from '../Input';\r\nimport Button from '../Button';\r\nimport api from '../../Services/api';\r\n\r\nimport NumberOnly from '../../utils/numberOnly';\r\n\r\nimport { useLeads } from '../../Context/Leads';\r\n\r\nimport { StyledForm, Row, Column, Label } from './styles'\r\n\r\n\r\nconst ListForm = () => {\r\n\r\n    const { setLeads } = useLeads();\r\n\r\n    function handleFetchFilterLeads(values) {\r\n\r\n        handleCreateQuery(values)\r\n\r\n        api.get(handleCreateQuery(values), {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        }).then(response => {\r\n            setLeads(response.data)\r\n        })\r\n    }\r\n\r\n    function handleCreateQuery(values) {\r\n        let query\r\n        if (values.name && values.cpf)\r\n            query = `/leads?nome=${values.name}&cpf=${NumberOnly(values.cpf)}&_sort=id&_order=desc`\r\n        else {\r\n            if (!values.name && values.cpf) {\r\n                query = `/leads?cpf=${NumberOnly(values.cpf)}&_sort=id&_order=desc`\r\n            } else {\r\n                if (values.name && !values.cpf) {\r\n                    query = `/leads?nome=${values.name}&_sort=id&_order=desc`\r\n                }\r\n            }\r\n        }\r\n        return query\r\n    }\r\n\r\n    function handleFetchAllLeads() {\r\n        api.get('/leads?_sort=id&_order=desc', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        }).then(response => {\r\n            setLeads(response.data)\r\n        })\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            cpf: ''\r\n        },\r\n        onSubmit: values => {\r\n            if (values.name || values.cpf) {\r\n                handleFetchFilterLeads(values)\r\n            } else {\r\n                handleFetchAllLeads()\r\n            }\r\n        },\r\n    })\r\n\r\n    useEffect(() => {\r\n        handleFetchAllLeads()\r\n    }, [])\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit} autoComplete=\"off\">\r\n            <Row>\r\n                <Label>Filters</Label>\r\n            </Row>\r\n            <Row>\r\n                <Column>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.name}\r\n                        flex={1}\r\n                    />\r\n                </Column>\r\n                <Column>\r\n                    <Input\r\n                        name=\"cpf\"\r\n                        label=\"CPF\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.cpf}\r\n                        flex={1}\r\n                        mask=\"999.999.999-29\"\r\n                    />\r\n                </Column>\r\n            </Row>\r\n            <Row>\r\n                <Column\r\n                    justifycontent=\"flex-end\"\r\n                >\r\n                    <Button\r\n                        label=\"Search\"\r\n                        bgcolor=\"#F79028\"\r\n                        bgcolorhover=\"#e08427\"\r\n                        type=\"submit\"\r\n                    />\r\n                </Column>\r\n            </Row>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default ListForm;","import styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface Iprops {\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n}\r\n\r\nconst ContainerButtonNew = styled.div`\r\n    display:flex;\r\n    justify-content:flex-start;\r\n`\r\nconst StyledLink = styled(Link)<Iprops> `\r\n    border-radius: 3px;\r\n    outline:0;\r\n    border: 0 none;\r\n    background: ${ props => props.bgcolor};\r\n    font-weight: 600;\r\n    height:35px;\r\n    width: 6rem;\r\n    cursor: pointer;\r\n    text-align:center;\r\n    text-decoration: none;\r\n    padding: 10px;\r\n    &:hover {\r\n        background: ${ props => props.bgcolorhover};\r\n    },\r\n    &:visited {\r\n        color: #111;\r\n    }\r\n`\r\nexport { ContainerButtonNew, StyledLink }","import React from 'react';\r\n\r\nimport { ContainerButtonNew, StyledLink } from './styles'\r\n\r\ninterface IProps {\r\n    to: string;\r\n    label: string;\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n}\r\n\r\nconst LinkButton: React.FC<IProps> = ({to, label, bgcolor, bgcolorhover}) => {\r\n\r\n    return (\r\n        <ContainerButtonNew>\r\n            <StyledLink to={to} bgcolor={bgcolor} bgcolorhover={bgcolorhover}>\r\n                {label}\r\n            </StyledLink>\r\n        </ContainerButtonNew>\r\n    )\r\n}\r\n\r\nexport default LinkButton;","function CPFMask(cpf) {\r\n    const firstSlice = cpf.slice(0, 3)\r\n    const secondSlice = cpf.slice(3, 6)\r\n    const thirdSlice = cpf.slice(6, 9)\r\n    const verificationDigit = cpf.slice(9, 11)\r\n\r\n    const maskedCPF = firstSlice + '.' + secondSlice + '.' + thirdSlice + '-' + verificationDigit\r\n    return maskedCPF\r\n}\r\n\r\nexport default CPFMask","import React, { useEffect } from 'react';\r\n\r\nimport { BsPencilSquare, BsTrash } from 'react-icons/bs'\r\n\r\nimport { Container, Content, Table, Tbody, ThHead, TrBody, StyledLink } from './styles'\r\nimport PageHeader from '../../Components/PageHeader';\r\nimport ListForm from '../../Components/ListForm';\r\nimport LinkButton from '../../Components/LinkButton';\r\n\r\nimport { useLeads } from '../../Context/Leads';\r\n\r\nimport CPFMask from '../../utils/cpfMask';\r\nimport api from '../../Services/api';\r\n\r\n\r\ninterface Ilead {\r\n    id: number;\r\n    nome: string;\r\n    email: string;\r\n    cpf: string;\r\n    estadoCivil: string;\r\n    nomeConjugue: string;\r\n}\r\n\r\n\r\nfunction ListLeadPage() {\r\n\r\n    function handleFetchLeads() {\r\n        api.get('/leads?_sort=id&_order=desc').then(response => {\r\n            setLeads(response.data)\r\n        })\r\n    }\r\n\r\n    function handleDeleteLead(id: number) {\r\n        api.delete(`/leads/${id}`).then(() => {\r\n            handleFetchLeads()\r\n        })\r\n    }\r\n\r\n    const { leads, setLeads } = useLeads();\r\n\r\n    useEffect(() => {\r\n        //handleFetchLeads()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <PageHeader title=\"Search Leads\" />\r\n                <ListForm />\r\n                <LinkButton\r\n                    to=\"/add\"\r\n                    label=\"New Lead\"\r\n                    bgcolor=\"#F79028\"\r\n                    bgcolorhover=\"#e08427\"\r\n                />\r\n                {leads.length > 0 &&\r\n\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <ThHead></ThHead>\r\n                                <ThHead></ThHead>\r\n                                <ThHead>Email</ThHead>\r\n                                <ThHead>Name</ThHead>\r\n                                <ThHead>CPF</ThHead>\r\n                            </tr>\r\n                        </thead>\r\n                        <Tbody>\r\n                            {\r\n                                leads.map(function (lead) {\r\n                                    return (\r\n                                        <TrBody key={lead.id}>\r\n                                            <td>\r\n                                                <StyledLink to={{\r\n                                                    pathname: '/add',\r\n                                                    state: lead.id,\r\n                                                }}>\r\n                                                    <BsPencilSquare style={{ padding: 0, width: 15, height: 15, cursor: \"pointer\" }} />\r\n                                                </StyledLink>\r\n                                            </td>\r\n                                            <td style={{ paddingLeft: 0 }}><BsTrash style={{ padding: 0, width: 15, height: 15, cursor: \"pointer\" }} onClick={(e) => { handleDeleteLead(lead.id) }} /></td>\r\n                                            <td>{lead.email}</td>\r\n                                            <td>{lead.nome}</td>\r\n                                            <td>{CPFMask(lead.cpf)}</td>\r\n                                        </TrBody>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </Tbody>\r\n                    </Table>\r\n                }\r\n            </Content >\r\n        </Container >\r\n    );\r\n}\r\n\r\nexport default ListLeadPage;","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content:center\r\n`\r\nconst Content = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100vw;\r\n    max-width: 700px;\r\n    padding:0\r\n`\r\n\r\nexport { Container, Content }","import styled from 'styled-components';\r\n\r\nconst SelectContainer = styled.div `\r\n    display:flex;\r\n    flex-direction: column;\r\n    width: 100%\r\n`\r\nconst StyledSelect = styled.select `\r\n    border-color: #DCDCDC;\r\n    border-width: 1px;\r\n    border-radius: 5px;\r\n    border-style: solid;\r\n    outline: 0;\r\n`\r\n\r\nconst Label = styled.label `\r\n    padding-left: 0;\r\n`\r\n\r\nexport { SelectContainer, StyledSelect, Label };","import React, { SelectHTMLAttributes } from 'react';\r\n\r\nimport { SelectContainer, StyledSelect, Label } from './styles';\r\n\r\ninterface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {\r\n    name: string;\r\n    label: string;\r\n    options: Array<{ value: number, label: string }>;\r\n};\r\n\r\nconst Select: React.FC<SelectProps> = ({ name, label, options, ...rest }) => {\r\n\r\n    return (\r\n        <SelectContainer>\r\n            <Label htmlFor={name}>{label}</Label>\r\n            <StyledSelect id={name} value={0} {...rest}>\r\n                {options.map( option => {\r\n                    return <option key={option.value} value={option.value}>{option.label}</option>\r\n                })}\r\n            </StyledSelect>\r\n        </SelectContainer>\r\n    )\r\n}\r\n\r\nexport default Select;","import styled from 'styled-components'\r\n\r\ninterface Iprops {\r\n    justifycontent?: string;\r\n}\r\n\r\nconst StyledForm = styled.form `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: #FFFFFF;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 13px;\r\n    margin-top: 15px;\r\n    padding:5px;\r\n`\r\n\r\nconst Row = styled.div<Iprops> `\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: ${ props => props.justifycontent};\r\n    padding: 0;\r\n`\r\n\r\nconst Column = styled.div<Iprops> `\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: ${ props => props.justifycontent};\r\n    width: 100%;\r\n    padding: 0;\r\n`\r\nconst Label = styled.div`\r\n    color: #020202;\r\n    font-weight: 600;\r\n    font-size: 15px\r\n`\r\nexport { StyledForm, Row, Label, Column }","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport Input from '../Input';\r\nimport Button from '../Button';\r\nimport Select from '../Select';\r\nimport LinkButton from '../LinkButton';\r\n\r\nimport NumberOnly from '../../utils/numberOnly';\r\n\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nimport api from '../../Services/api';\r\n\r\nimport { StyledForm, Row, Column, Label } from './styles'\r\n\r\nconst AddForm = () => {\r\n\r\n    const location = useLocation();\r\n    const history = useHistory()\r\n\r\n    const [isUpdate, setIsUpdate] = useState(false)\r\n    const [labelButton, setLabelButton] = useState(\"\")\r\n    const [initialValues, setInitialValues] = useState({\r\n        id: 0,\r\n        name: '',\r\n        cpf: '',\r\n        email: '',\r\n        maritalStatus: '',\r\n        spouseName: ''\r\n    })\r\n    const [maritalStatusOptions, setMaritalStatusOptions] = useState([\r\n        { nomeEstadoCivil: \"\" }\r\n    ])\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        enableReinitialize: true,\r\n        validationSchema: yup.object().shape({\r\n            name:\r\n                yup\r\n                    .string()\r\n                    .required(\"Name is a required field\"),\r\n            cpf:\r\n                yup\r\n                    .string().length(11, 'CPF must be exactly 11 characters')\r\n                    .required(\"CPF is a required field\"),\r\n            email:\r\n                yup\r\n                    .string()\r\n                    .email()\r\n                    .required('Email is a required field'),\r\n            maritalStatus:\r\n                yup\r\n                    .number(),\r\n            spouseName:\r\n                yup\r\n                    .string()\r\n                    .when('maritalStatus', {\r\n                        is: 1,\r\n                        then:\r\n                            yup\r\n                                .string()\r\n                                .required(\"Spouse Name is a required field when Marital State is Married\")\r\n                    })\r\n        }),\r\n        onSubmit: values => {\r\n            if (isUpdate) {\r\n                handleUpdateLead(values)\r\n            } else {\r\n                handleCreateNewLead(values)\r\n            }\r\n        },\r\n    })\r\n\r\n    const handleUpdateLead = (values) => {\r\n        api.put(`/leads/${values.id}`, {\r\n            nome: values.name,\r\n            email: values.email,\r\n            cpf: NumberOnly(values.cpf),\r\n            estadoCivil: values.maritalStatus,\r\n            nomeConjugue: values.spouseName\r\n        }).then(() => {\r\n            alert('Cadastro atualizado com sucesso')\r\n            history.push('/')\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            alert('Erro ao atualizar cadastro.')\r\n        })\r\n    }\r\n\r\n    const handleCreateNewLead = (values) => {\r\n        api.post('/leads', {\r\n            nome: values.name,\r\n            email: values.email,\r\n            cpf: NumberOnly(values.cpf),\r\n            estadoCivil: values.maritalStatus,\r\n            nomeConjugue: values.spouseName\r\n        }).then(() => {\r\n            alert('Cadastro realizado com sucesso')\r\n            history.push('/')\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            alert('Erro ao efetuar cadastro.')\r\n        })\r\n    }\r\n\r\n    const handleToggleDisabledInput = () => {\r\n        if (formik.values.maritalStatus.toString() !== \"1\") {\r\n            updateSpouseName()\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    const updateSpouseName = () => {\r\n        formik.values.spouseName = ''\r\n    }\r\n\r\n    const handleLoadLead = (dados) => {\r\n        setIsUpdate(true)\r\n        setInitialValues({\r\n            id: dados.id,\r\n            name: dados.nome,\r\n            cpf: dados.cpf,\r\n            email: dados.email,\r\n            maritalStatus: dados.estadoCivil,\r\n            spouseName: dados.nomeConjugue,\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        api.get('/tiposEstadoCivil').then(response => {\r\n            setMaritalStatusOptions(response.data)\r\n        })\r\n\r\n        if (location.state !== undefined && location.state !== 0) {\r\n            setLabelButton(\"Update\")\r\n            api.get(`leads/${location.state}`).then(response => {\r\n                handleLoadLead(response.data)\r\n            })\r\n        }else{\r\n            setLabelButton(\"Save\")\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit} autoComplete=\"off\">\r\n            <Row>\r\n                <Label></Label>\r\n            </Row>\r\n            <Row>\r\n                <Column>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.name}\r\n                        flex={1}\r\n                    />\r\n                    {formik.touched.name && formik.errors.name ? (\r\n                        <div>{formik.errors.name}</div>\r\n                    ) : null}\r\n                </Column>\r\n                <Column>\r\n                    <Input\r\n                        name=\"cpf\"\r\n                        label=\"CPF\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.cpf}\r\n                        flex={1}\r\n                        mask={\"999.999.999-99\"}\r\n                    />\r\n                    {formik.touched.cpf && formik.errors.cpf ? (\r\n                        <div>{formik.errors.cpf}</div>\r\n                    ) : null}\r\n                </Column>\r\n            </Row>\r\n            <Row>\r\n                <Column>\r\n                    <Input\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        type=\"email \"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.email}\r\n                        flex={1}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ? (\r\n                        <div>{formik.errors.email}</div>\r\n                    ) : null}\r\n                </Column>\r\n\r\n                <Column>\r\n\r\n                    <Select\r\n                        name=\"maritalStatus\"\r\n                        label=\"Marital Status\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.maritalStatus}\r\n                        options={\r\n                            maritalStatusOptions.map((e, index) => {\r\n                                return { value: index, label: e.nomeEstadoCivil }\r\n                            })\r\n                        }\r\n                    />\r\n                </Column>\r\n            </Row>\r\n            <Row\r\n                justifycontent=\"flex-start\"\r\n            >\r\n                <Column>\r\n                    <Input\r\n                        name=\"spouseName\"\r\n                        label=\"Spouse Name\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.spouseName}\r\n                        flex={1}\r\n                        disabled={handleToggleDisabledInput()}\r\n                    />\r\n                     {formik.touched.spouseName && formik.errors.spouseName ? (\r\n                        <div>{formik.errors.spouseName}</div>\r\n                    ) : null}\r\n                </Column>\r\n                <Column />\r\n            </Row>\r\n            <Row\r\n                justifycontent=\"flex-end\"\r\n            >\r\n                <Column\r\n                    justifycontent=\"flex-start\"\r\n                >\r\n                    <LinkButton\r\n                        to=\"/\"\r\n                        label=\"Cancel\"\r\n                        bgcolor=\"#989898\"\r\n                        bgcolorhover=\"#807f7f\"\r\n                    />\r\n                </Column>\r\n                <Column\r\n                    justifycontent=\"flex-end\"\r\n                >\r\n                    <Button\r\n                        label={labelButton}\r\n                        bgcolor=\"#F79028\"\r\n                        bgcolorhover=\"#e08427\"\r\n                        type=\"submit\"\r\n                    />\r\n                </Column>\r\n            </Row>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default AddForm;","import React from 'react';\r\n\r\nimport { Container, Content } from './styles';\r\nimport PageHeader from '../../Components/PageHeader';\r\nimport AddForm from '../../Components/AddForm';\r\n\r\nfunction CreateLeadPage() {\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <PageHeader title=\"Register a Lead\"/>\r\n                <AddForm/>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CreateLeadPage;","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport ListLeadPage from '../src/Pages/ListLeadPage';\r\nimport CreateLeadPage from '../src/Pages/CreateLeadPage';\r\n\r\nfunction Routes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Route path=\"/\" exact={true} component={ListLeadPage} />\r\n            <Route path=\"/add\" component={CreateLeadPage} />\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React, { } from 'react';\nimport GlobalStyle from './Styles/global';\nimport Routes from './Routes';\nimport LeadsProvider from './Context/Leads';\n\nfunction App() {\n  return (\n    <LeadsProvider>\n      <div className=\"App\">\n        <GlobalStyle />\n        <Routes />\n      </div>\n    </LeadsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n "],"sourceRoot":""}