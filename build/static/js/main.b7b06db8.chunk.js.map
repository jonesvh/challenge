{"version":3,"sources":["global.ts","components/pageheader/styles.ts","components/pageheader/index.tsx","components/input/styles.ts","components/input/index.tsx","components/button/styles.ts","components/button/index.tsx","utils/numberOnly.ts","context/Leads.js","services/api.ts","components/listform/styles.ts","components/listform/index.tsx","components/linkbutton/styles.ts","components/linkbutton/index.tsx","utils/cpfMask.ts","pages/listleadpage/styles.ts","pages/listleadpage/index.tsx","pages/createleadpage/styles.ts","components/addform/schema.ts","components/select/styles.ts","components/select/index.tsx","components/addform/styles.ts","components/addform/index.tsx","pages/createleadpage/index.tsx","routes.tsx","App.tsx","index.tsx","assets/images/logo.svg"],"names":["createGlobalStyle","Header","styled","div","Image","img","Title","PageHeader","title","src","logo","alt","className","InputContainer","InputItem","input","props","bordercolor","Label","label","StyleInputMask","InputMask","ErrorMsg","ErrorMsgText","Input","name","flex","type","disabled","mask","error","msgerror","rest","style","htmlFor","id","ButtonContainer","ButtonItem","button","bgcolor","bgcolorhover","Button","NumberOnly","string","undefined","replace","LeadsContext","createContext","useLeads","context","useContext","Error","leads","setLeads","LeadsProvider","children","useState","Provider","value","api","axios","create","baseURL","StyledForm","form","Row","justifycontent","Column","ListForm","useFormik","initialValues","cpf","onSubmit","values","handleFetchFilterLeads","handleFetchAllLeads","handleSubmit","handleChange","get","headers","then","response","data","handleCreateQuery","query","useEffect","autoComplete","onChange","ContainerButtonNew","StyledLink","Link","LinkButton","to","CPFMask","slice","Container","Content","Table","table","Tbody","tbody","TrBody","tr","TdBody","td","maxwidth374display","ThHead","th","TrashIco","BsTrash","PencilIco","BsPencilSquare","ListLeadPage","handleDeleteLead","delete","console","log","length","map","lead","key","pathname","state","onClick","email","nome","SchemaAddForm","yup","shape","required","test","matches","maritalStatus","spouseName","when","is","SelectContainer","StyledSelect","select","Select","options","option","AddForm","location","useLocation","history","useHistory","isUpdate","setIsUpdate","labelButton","setLabelButton","setInitialValues","nomeEstadoCivil","maritalStatusOptions","setMaritalStatusOptions","enableReinitialize","validationSchema","handleUpdateLead","handleCreateNewLead","errors","touched","handleBlur","post","estadoCivil","nomeConjugue","push","catch","err","put","alert","updateSpouseName","dados","onBlur","e","index","toString","CreateLeadPage","Routes","path","exact","component","App","Leads","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b7b06db8.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    * {\r\n        margin: 0;\r\n        padding: 5px;\r\n        box-sizing: border-box;\r\n    }\r\n    body {\r\n        background: #224D74;;\r\n        font-size: 14px;\r\n        font-family: Arial;\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nconst Header = styled.div`\r\n    margin-bottom: 30px;\r\n`\r\nconst Image = styled.img`\r\n    @media(max-width: 400px){\r\n        width: 200px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        width: 260px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        width: 280px;\r\n    }\r\n`\r\nconst Title = styled.div`\r\n    color: #FFFFFF;\r\n\r\n    @media(max-width: 400px){\r\n        font-size: 24px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 26px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 28px;\r\n    }\r\n`\r\nexport { Header, Image, Title }","import React from 'react';\r\nimport logo from '../../assets/images/logo.svg'\r\n\r\nimport { Header, Image, Title } from './styles'\r\n\r\ninterface TitleProps {\r\n    title: string;\r\n}\r\n\r\nconst PageHeader: React.FC<TitleProps> = ({title}) => {\r\n    return (\r\n        <>\r\n            <Header>\r\n                <Image src={logo} alt=\"logo\" />\r\n            </Header>\r\n\r\n            <Title className=\"label\">{title}</Title>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PageHeader;","import styled from 'styled-components';\r\n\r\nimport InputMask from 'react-input-mask';\r\n\r\ninterface Iprops {\r\n    bordercolor: string;\r\n}\r\n\r\nconst InputContainer = styled.div `\r\n    flex:1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 40vw;\r\n    max-width: 330px;\r\n`\r\n\r\nconst InputItem = styled.input<Iprops> `\r\n    flex:0;\r\n    border-color: ${ props => props.bordercolor || \"#DCDCDC\"};\r\n    border-width: 1px;\r\n    border-radius: 5px;\r\n    border-style: solid;\r\n    outline: 0;\r\n    color: #3C3C3C !important;\r\n    &:disabled {\r\n        cursor: not-allowed;\r\n        background: #D4D4D4;\r\n    };\r\n\r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n    \r\n`\r\nconst Label = styled.label`\r\n    color: #020202;\r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n\r\n`\r\nconst StyleInputMask = styled(InputMask)<Iprops> `\r\n    flex:0;\r\n    border-color: ${ props => props.bordercolor || \"#DCDCDC\"};\r\n    border-width: 1px;\r\n    border-radius: 5px;\r\n    border-style: solid;\r\n    outline: 0;\r\n    color: #3C3C3C !important;\r\n    &:disabled {\r\n        cursor: not-allowed;\r\n        background: #D4D4D4;\r\n    };\r\n    \r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n`\r\nconst ErrorMsg = styled.div `\r\n    display:flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n    padding: 0px;\r\n    @media(max-width: 400px){\r\n        display:none;\r\n    }\r\n`\r\nconst ErrorMsgText = styled.div `\r\n    padding-top: 0;\r\n    color: #ff0000;\r\n    text-align: end;\r\n`\r\n\r\nexport { InputContainer, InputItem, Label, StyleInputMask, ErrorMsg, ErrorMsgText };","import React, { InputHTMLAttributes } from 'react';\r\n\r\nimport { InputContainer, InputItem, Label, StyleInputMask, ErrorMsg, ErrorMsgText } from './styles'\r\n\r\n\r\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    name: string;\r\n    label: string;\r\n    type?: string;\r\n    flex?: number;\r\n    disabled?: boolean;\r\n    mask?: string;\r\n    error?: boolean;\r\n    msgerror?: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ name, label, flex, type, disabled, mask, error, msgerror, ...rest }) => {\r\n\r\n    let bordercolor = \"\"\r\n    if (error) {\r\n        bordercolor = \"#ff0000\"\r\n    }\r\n    return (\r\n        <InputContainer style={{ flex: flex }}>\r\n            <Label htmlFor={name}>{label}</Label>\r\n            {!mask ?\r\n                <InputItem type={type ? type : \"text\"} id={name} {...rest} disabled={disabled} bordercolor={bordercolor} />\r\n                :\r\n                <StyleInputMask type={type ? type : \"text\"} id={name} {...rest} mask=\"999.999.999-99\" bordercolor={bordercolor}/>\r\n            }\r\n            {error && <ErrorMsg><ErrorMsgText>{msgerror}</ErrorMsgText></ErrorMsg>}\r\n        </InputContainer>\r\n    )\r\n}\r\n\r\nexport default Input;","import styled from 'styled-components';\r\n\r\ninterface Iprops {\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n}\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    \r\n`\r\n\r\nconst ButtonItem = styled.button<Iprops> `\r\n    border-radius: 3px;\r\n    outline:0;\r\n    border: 0 none;\r\n    background: ${ props => props.bgcolor};\r\n    font-weight: 600;\r\n    height:35px;\r\n    width: 6rem;\r\n    cursor: pointer;\r\n    font-size:14px;\r\n    \r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n        width: 7rem;\r\n        font-weight: 500;\r\n    }\r\n\r\n    &:hover {\r\n        background: ${ props => props.bgcolorhover};\r\n    }\r\n`\r\n\r\nexport { ButtonContainer, ButtonItem };","import React, { ButtonHTMLAttributes } from 'react';\r\n\r\nimport { ButtonContainer, ButtonItem } from './styles'\r\n\r\ntype Type = \"button\" | \"submit\" | \"reset\";\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    label: string;\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n    type?: Type;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ label, bgcolor, bgcolorhover, type, ...rest }) => {\r\n    return (\r\n        <ButtonContainer>\r\n            <ButtonItem type={type ? type : \"button\"} {...rest} bgcolor={bgcolor} bgcolorhover={bgcolorhover}>\r\n                {label}\r\n            </ButtonItem>\r\n        </ButtonContainer>\r\n    )\r\n}\r\n\r\nexport default Button;","const NumberOnly = (string) => {\r\n    if (string !== undefined && string !== null) {\r\n        const number = string.replace(/\\D+/g, '')\r\n        return number\r\n    }\r\n}\r\n\r\nexport default NumberOnly;","import React, { createContext, useState, useContext } from \"react\";\r\n\r\nconst LeadsContext = createContext();\r\n\r\nconst LeadsProvider = ({ children }) => {\r\n  const [leads, setLeads] = useState(0);\r\n\r\n  return (\r\n    <LeadsContext.Provider\r\n      value={{\r\n        leads,\r\n        setLeads\r\n      }}\r\n    >\r\n      {children}\r\n    </LeadsContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useLeads = () => {\r\n  const context = useContext(LeadsContext);\r\n  if (!context) throw new Error(\"useLeads must be used within a LeadsProvider\");\r\n  const { leads, setLeads } = context;\r\n  return { leads, setLeads };\r\n}\r\n\r\nexport default LeadsProvider;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: \"https://challenge-leads-db.herokuapp.com\"\r\n})\r\n\r\nexport default api;","import styled from 'styled-components'\r\n\r\ninterface Iprops {\r\n    justifycontent?: string;\r\n}\r\n\r\nconst StyledForm = styled.form `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: #FFFFFF;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 13px;\r\n    margin-top: 15px;\r\n    padding:5px;\r\n    autocomplete:\"off\"\r\n`\r\n\r\nconst Row = styled.div<Iprops> `\r\n    display: flex;\r\n    justify-content: ${ props => props.justifycontent};\r\n    width: 100%;\r\n    padding: 0;\r\n`\r\n\r\nconst Column = styled.div<Iprops> `\r\n    display: flex;\r\n    justify-content: ${ props => props.justifycontent};\r\n    width: 100%;\r\n    padding: 0;\r\n`\r\nconst Label = styled.div`\r\n    color: #020202;\r\n    font-weight: 600;\r\n    \r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n\r\n`\r\n\r\nexport { StyledForm, Row, Label, Column }","import React, { useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport Input from '../input';\r\nimport Button from '../button';\r\nimport NumberOnly from '../../utils/numberOnly';\r\n\r\nimport { useLeads } from '../../context/Leads';\r\n\r\nimport api from '../../services/api';\r\n\r\nimport { StyledForm, Row, Column, Label } from './styles'\r\n\r\nconst ListForm = () => {\r\n\r\n    const { setLeads } = useLeads(); //hook para usar state global // atualiza a tabela do modulo pages/listleadpage\r\n\r\n    const {\r\n        handleSubmit,\r\n        handleChange,\r\n        values\r\n    } = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            cpf: ''\r\n        },\r\n        onSubmit: values => {\r\n            if (values.name || values.cpf) {\r\n                handleFetchFilterLeads(values)\r\n            } else {\r\n                handleFetchAllLeads()\r\n            }\r\n        },\r\n    })\r\n\r\n    const handleFetchAllLeads = () => {\r\n        api.get('/leads?_sort=id&_order=desc', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        }).then(response => {\r\n            setLeads(response.data)\r\n        })\r\n    }\r\n\r\n    const handleFetchFilterLeads = (values) => {\r\n\r\n        handleCreateQuery(values)\r\n\r\n        api.get(handleCreateQuery(values), {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        }).then(response => {\r\n            setLeads(response.data)\r\n        })\r\n    }\r\n\r\n    const handleCreateQuery = (values) => {\r\n        let query\r\n        let name = values.name\r\n        let cpf = values.cpf\r\n        if (name && cpf)\r\n            query = `/leads?nome=${name}&cpf=${NumberOnly(values.cpf)}&_sort=id&_order=desc`\r\n        else {\r\n            if (!values.name && values.cpf) {\r\n                query = `/leads?cpf=${NumberOnly(values.cpf)}&_sort=id&_order=desc`\r\n            } else {\r\n                if (values.name && !values.cpf) {\r\n                    query = `/leads?nome=${values.name}&_sort=id&_order=desc`\r\n                }\r\n            }\r\n        }\r\n        return query\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleFetchAllLeads()\r\n    }, [])\r\n\r\n    return (\r\n        <StyledForm onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <Row>\r\n                <Label>Filters</Label>\r\n            </Row>\r\n            <Row>\r\n                <Column>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        type=\"text\"\r\n                        onChange={handleChange}\r\n                        value={values.name}\r\n                        flex={1}\r\n                    />\r\n                </Column>\r\n                <Column>\r\n                    <Input\r\n                        name=\"cpf\"\r\n                        label=\"CPF\"\r\n                        type=\"text\"\r\n                        onChange={handleChange}\r\n                        value={values.cpf}\r\n                        flex={1}\r\n                        mask=\"999.999.999-29\"\r\n                    />\r\n                </Column>\r\n            </Row>\r\n            <Row>\r\n                <Column\r\n                    justifycontent=\"flex-end\"\r\n                >\r\n                    <Button\r\n                        label=\"Search\"\r\n                        bgcolor=\"#F79028\"\r\n                        bgcolorhover=\"#e08427\"\r\n                        type=\"submit\"\r\n                    />\r\n                </Column>\r\n            </Row>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default ListForm;","import styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface Iprops {\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n}\r\n\r\nconst ContainerButtonNew = styled.div`\r\n    display:flex;\r\n    justify-content:flex-start;\r\n`\r\nconst StyledLink = styled(Link)<Iprops> `\r\n    border-radius: 3px;\r\n    outline:0;\r\n    border: 0 none;\r\n    background: ${ props => props.bgcolor};\r\n    font-weight: 600;\r\n    height:35px;\r\n    width: 6rem;\r\n    cursor: pointer;\r\n    text-align:center;\r\n    text-decoration: none;\r\n    padding: 10px;\r\n    &:hover {\r\n        background: ${ props => props.bgcolorhover};\r\n    },\r\n    &:visited {\r\n        color: #111;\r\n    }\r\n\r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n        width: 7rem;\r\n        padding: 8px;\r\n        font-weight: 500;\r\n    }\r\n`\r\nexport { ContainerButtonNew, StyledLink }","import React from 'react';\r\n\r\nimport { ContainerButtonNew, StyledLink } from './styles'\r\n\r\ninterface IProps {\r\n    to: string;\r\n    label: string;\r\n    bgcolor: string;\r\n    bgcolorhover: string;\r\n}\r\n\r\nconst LinkButton: React.FC<IProps> = ({to, label, bgcolor, bgcolorhover}) => {\r\n\r\n    return (\r\n        <ContainerButtonNew>\r\n            <StyledLink to={to} bgcolor={bgcolor} bgcolorhover={bgcolorhover}>\r\n                {label}\r\n            </StyledLink>\r\n        </ContainerButtonNew>\r\n    )\r\n}\r\n\r\nexport default LinkButton;","const CPFMask = (cpf) => {\r\n    const firstSlice = cpf.slice(0, 3)\r\n    const secondSlice = cpf.slice(3, 6)\r\n    const thirdSlice = cpf.slice(6, 9)\r\n    const verificationDigit = cpf.slice(9, 11)\r\n\r\n    const maskedCPF = firstSlice + '.' + secondSlice + '.' + thirdSlice + '-' + verificationDigit\r\n    return maskedCPF\r\n}\r\n\r\nexport default CPFMask","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { BsPencilSquare, BsTrash } from 'react-icons/bs'\r\n\r\ninterface IpropsRowColumn {\r\n    justifycontent?: string;\r\n}\r\n\r\ninterface IpropsTable {\r\n    maxwidth374display?: string;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content:center\r\n`\r\nconst Content = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100vw;\r\n    max-width: 700px;\r\n    padding:5px\r\n`\r\nconst Label = styled.div`\r\n    color: #020202;\r\n    font-weight: 600;\r\n    font-size: 15px\r\n`\r\nconst Filter = styled.div`\r\n    background: #FFFFFF;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 13px;\r\n    margin-top: 15px;\r\n`\r\n\r\nconst Row = styled.div<IpropsRowColumn> `\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: ${ props => props.justifycontent};\r\n    padding: 0;\r\n`\r\n\r\nconst Column = styled.div<IpropsRowColumn> `\r\n    display: flex;\r\n    justify-content: ${ props => props.justifycontent};\r\n    width: 100%;\r\n    padding: 0;\r\n`\r\nconst Table = styled.table`\r\n    border: 0;\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n    width:100%;\r\n    margin-top: 10px;\r\n`\r\nconst Tbody = styled.tbody`\r\n    background: #FFF;\r\n    border-spacing: 1px;\r\n    \r\n`\r\nconst TrBody = styled.tr`\r\n    border-bottom: 1px solid #224D74;\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        height: 35px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        height: 40px;\r\n    }\r\n`\r\n\r\nconst TdBody = styled.td<IpropsTable>`\r\n    @media(max-width: 400px) {\r\n        display:${ props => props.maxwidth374display};\r\n    }\r\n`\r\n\r\nconst ThHead = styled.th<IpropsTable>`\r\n    text-align: left;\r\n    color: #FFF;\r\n    font-weight: 500;\r\n    @media(max-width: 400px) {\r\n        font-size: 14px;\r\n        display:${ props => props.maxwidth374display};\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n    outline:0;\r\n    border: 0 none;\r\n    cursor: pointer;\r\n    text-align:center;\r\n    text-decoration: none;\r\n    padding: 0px;\r\n    &:visited {\r\n        color: #111;\r\n    } \r\n`\r\nconst TrashIco = styled(BsTrash)`\r\n    padding: 0;\r\n    width: 15;\r\n    height: 15;\r\n    cursor: \"pointer\";\r\n`\r\nconst PencilIco = styled(BsPencilSquare)`\r\n    padding: 0;\r\n    width: 15;\r\n    height: 15;\r\n    cursor: \"pointer\";\r\n`\r\nexport { Container, Content, Label, Filter, Row, Column, Table, Tbody, ThHead, TrBody, TdBody, StyledLink, TrashIco, PencilIco };","import React, { useEffect } from 'react';\r\n\r\nimport PageHeader from '../../components/pageheader';\r\nimport ListForm from '../../components/listform';\r\nimport LinkButton from '../../components/linkbutton';\r\n\r\nimport { useLeads } from '../../context/Leads';\r\n\r\nimport CPFMask from '../../utils/cpfMask';\r\nimport api from '../../services/api';\r\n\r\nimport { Container, Content, Table, Tbody, ThHead, TrBody, TdBody, StyledLink, TrashIco, PencilIco } from './styles'\r\n\r\nconst ListLeadPage = () => {\r\n\r\n    const { leads, setLeads } = useLeads();\r\n\r\n    const handleFetchLeads = () => {\r\n        api.get('/leads?_sort=id&_order=desc').then(response => {\r\n            console.log(response)\r\n            setLeads(response.data)\r\n        })\r\n    }\r\n\r\n    const handleDeleteLead = (id: number) => {\r\n        api.delete(`/leads/${id}`).then(() => {\r\n            handleFetchLeads()\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <PageHeader title=\"Search Leads\" />\r\n                <ListForm />\r\n                <LinkButton\r\n                    to=\"/add\"\r\n                    label=\"New Lead\"\r\n                    bgcolor=\"#F79028\"\r\n                    bgcolorhover=\"#e08427\"\r\n                />\r\n                {leads.length > 0 &&\r\n\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <ThHead></ThHead>\r\n                                <ThHead></ThHead>\r\n                                <ThHead maxwidth374display=\"none\">Email</ThHead>\r\n                                <ThHead>Name</ThHead>\r\n                                <ThHead>CPF</ThHead>\r\n                            </tr>\r\n                        </thead>\r\n                        <Tbody>\r\n                            {\r\n                                leads.map(function (lead) {\r\n                                    return (\r\n                                        <TrBody key={lead.id}>\r\n                                            <TdBody>\r\n                                                <StyledLink to={{\r\n                                                    pathname: '/add',\r\n                                                    state: lead.id,\r\n                                                }}>\r\n                                                    <PencilIco/>\r\n                                                </StyledLink>\r\n                                            </TdBody>\r\n                                            <TdBody><TrashIco onClick={() => { handleDeleteLead(lead.id)}} /></TdBody>\r\n                                            <TdBody maxwidth374display=\"none\">{lead.email}</TdBody>\r\n                                            <TdBody>{lead.nome}</TdBody>\r\n                                            <TdBody>{CPFMask(lead.cpf)}</TdBody>\r\n                                        </TrBody>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </Tbody>\r\n                    </Table>\r\n                }\r\n            </Content >\r\n        </Container >\r\n    );\r\n}\r\n\r\nexport default ListLeadPage;","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content:center\r\n`\r\nconst Content = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100vw;\r\n    max-width: 700px;\r\n    padding:5px\r\n`\r\n\r\nexport { Container, Content }","import * as yup from 'yup';\r\nimport NumberOnly from '../../utils/numberOnly';\r\n\r\nconst SchemaAddForm = yup.object().shape({\r\n    name:\r\n        yup\r\n            .string()\r\n            .required(\"Name is a required field\"),\r\n    cpf:\r\n        yup\r\n            .string().required('CPF is a required field')\r\n            .test(\r\n                'cpf',\r\n                'CPF must be exactly 11 characters',\r\n                value => { return NumberOnly(value)?.length === 11 },\r\n            ),\r\n    email:\r\n        yup\r\n            .string()\r\n            .matches(/\\D+/g, 'only digits here')\r\n            .email()\r\n            .required('Email is a required field'),\r\n    maritalStatus:\r\n        yup\r\n            .number(),\r\n    spouseName:\r\n        yup\r\n            .string()\r\n            .when('maritalStatus', {\r\n                is: 1,\r\n                then:\r\n                    yup\r\n                        .string()\r\n                        .required('Spouse Name is a required field')\r\n            })\r\n})\r\n\r\nexport default SchemaAddForm;","import styled from 'styled-components';\r\n\r\nconst SelectContainer = styled.div `\r\n    display:flex;\r\n    flex-direction: column;\r\n    width: 100%\r\n`\r\nconst StyledSelect = styled.select `\r\n    border-color: #DCDCDC;\r\n    border-width: 1px;\r\n    border-radius: 5px;\r\n    border-style: solid;\r\n    outline: 0;\r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n`\r\n\r\nconst Label = styled.label `\r\n    padding-left: 0;\r\n    \r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n`\r\n\r\nexport { SelectContainer, StyledSelect, Label };","import React, { SelectHTMLAttributes } from 'react';\r\n\r\nimport { SelectContainer, StyledSelect, Label } from './styles';\r\n\r\ninterface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {\r\n    name: string;\r\n    label: string;\r\n    options: Array<{ value: number, label: string }>;\r\n};\r\n\r\nconst Select: React.FC<SelectProps> = ({ name, label, options, ...rest }) => {\r\n    return (\r\n        <SelectContainer>\r\n            <Label htmlFor={name}>{label}</Label>\r\n            <StyledSelect id={name} value={0} {...rest}>\r\n                {options.map( option => {\r\n                    return <option key={option.value} value={option.value}>{option.label}</option>\r\n                })}\r\n            </StyledSelect>\r\n        </SelectContainer>\r\n    )\r\n}\r\n\r\nexport default Select;","import styled from 'styled-components'\r\n\r\ninterface Iprops {\r\n    justifycontent?: string;\r\n}\r\n\r\nconst StyledForm = styled.form `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: #FFFFFF;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 13px;\r\n    margin-top: 15px;\r\n    padding:5px;\r\n`\r\n\r\nconst Row = styled.div<Iprops> `\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: ${ props => props.justifycontent};\r\n    padding: 0;\r\n`\r\n\r\nconst Column = styled.div<Iprops> `\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: ${ props => props.justifycontent};\r\n    width: 100%;\r\n    padding: 0;\r\n`\r\nconst Label = styled.div`\r\n    color: #020202;\r\n    font-weight: 600;\r\n    \r\n    @media(max-width: 400px){\r\n        font-size: 14px;\r\n    }\r\n    @media(min-width: 401px) and (max-width: 800px) {\r\n        font-size: 16px;\r\n    }\r\n    @media(min-width: 801px) {\r\n        font-size: 18px;\r\n    }\r\n`\r\n\r\nexport { StyledForm, Row, Column, Label }","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useFormik } from 'formik';\r\nimport SchemaAddForm from './schema';\r\n\r\nimport Input from '../input';\r\nimport Button from '../button';\r\nimport Select from '../select';\r\nimport LinkButton from '../linkbutton';\r\n\r\nimport NumberOnly from '../../utils/numberOnly';\r\n\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nimport api from '../../services/api';\r\n\r\nimport { StyledForm, Row, Column, Label } from './styles'\r\n\r\nconst AddForm = () => {\r\n    const location = useLocation();\r\n    const history = useHistory()\r\n\r\n    const [isUpdate, setIsUpdate] = useState(false)\r\n    const [labelButton, setLabelButton] = useState(\"\")\r\n    const [initialValues, setInitialValues] = useState({\r\n        id: 0,\r\n        name: '',\r\n        cpf: '',\r\n        email: '',\r\n        maritalStatus: '',\r\n        spouseName: ''\r\n    })\r\n    const [maritalStatusOptions, setMaritalStatusOptions] = useState([\r\n        { nomeEstadoCivil: \"\" }\r\n    ])\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        values\r\n    } = useFormik({\r\n        initialValues: initialValues,\r\n        enableReinitialize: true,\r\n        validationSchema: SchemaAddForm,\r\n        onSubmit: values => {\r\n            if (isUpdate) {\r\n                handleUpdateLead(values)\r\n            } else {\r\n                handleCreateNewLead(values)\r\n            }\r\n        },\r\n    })\r\n\r\n    const handleCreateNewLead = (values) => {\r\n        api.post('/leads', {\r\n            nome: values.name,\r\n            email: values.email,\r\n            cpf: NumberOnly(values.cpf),\r\n            estadoCivil: values.maritalStatus,\r\n            nomeConjugue: values.spouseName\r\n        }).then(() => {\r\n            history.push('/')\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const handleUpdateLead = (values) => {\r\n        api.put(`/leads/${values.id}`, {\r\n            nome: values.name,\r\n            email: values.email,\r\n            cpf: NumberOnly(values.cpf),\r\n            estadoCivil: values.maritalStatus,\r\n            nomeConjugue: values.spouseName\r\n        }).then(() => {\r\n            alert('Cadastro atualizado com sucesso')\r\n            history.push('/')\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            alert('Erro ao atualizar cadastro.')\r\n        })\r\n    }\r\n\r\n    const handleToggleDisabledInput = () => {\r\n        if (values.maritalStatus.toString() !== \"1\") {\r\n            updateSpouseName()\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    const updateSpouseName = () => {\r\n        values.spouseName = ''\r\n    }\r\n\r\n    const handleLoadLead = (dados) => {\r\n        setIsUpdate(true)\r\n        setInitialValues({\r\n            id: dados.id,\r\n            name: dados.nome,\r\n            cpf: dados.cpf,\r\n            email: dados.email,\r\n            maritalStatus: dados.estadoCivil,\r\n            spouseName: dados.nomeConjugue,\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        api.get('/tiposEstadoCivil').then(response => {\r\n            setMaritalStatusOptions(response.data)\r\n        })\r\n        if (location.state !== undefined && location.state !== 0) {\r\n            setLabelButton(\"Update\")\r\n            api.get(`leads/${location.state}`).then(response => {\r\n                handleLoadLead(response.data)\r\n            })\r\n        } else {\r\n            setLabelButton(\"Save\")\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <StyledForm onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <Row>\r\n                <Label>Lead</Label>\r\n            </Row>\r\n            <Row>\r\n                <Column>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        type=\"text\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.name}\r\n                        flex={1}\r\n                        error={(errors.name?.length !== 0 && errors.name !== undefined) && touched.name}\r\n                        msgerror={errors.name}\r\n                    />\r\n                </Column>\r\n                <Column>\r\n                    <Input\r\n                        name=\"cpf\"\r\n                        label=\"CPF\"\r\n                        type=\"text\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.cpf}\r\n                        flex={1}\r\n                        mask={\"999.999.999-99\"}\r\n                        error={(errors.cpf?.length !== 0 && errors.cpf !== undefined) && touched.cpf}\r\n                        msgerror={errors.cpf}\r\n                    />\r\n                </Column>\r\n            </Row>\r\n            <Row>\r\n                <Column>\r\n                    <Input\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        type=\"email \"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                        flex={1}\r\n                        error={(errors.email?.length !== 0 && errors.email !== undefined) && touched.email}\r\n                        msgerror={errors.email}\r\n                    />\r\n                </Column>\r\n\r\n                <Column>\r\n\r\n                    <Select\r\n                        name=\"maritalStatus\"\r\n                        label=\"Marital Status\"\r\n                        onChange={handleChange}\r\n                        // onBlur={handleBlur}\r\n                        value={values.maritalStatus}\r\n                        options={\r\n                            maritalStatusOptions.map((e, index) => {\r\n                                return { value: index, label: e.nomeEstadoCivil }\r\n                            })\r\n                        }\r\n                    />\r\n                </Column>\r\n            </Row>\r\n            <Row\r\n                justifycontent=\"flex-start\"\r\n            >\r\n                <Column>\r\n                    <Input\r\n                        name=\"spouseName\"\r\n                        label=\"Spouse Name\"\r\n                        type=\"text\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.spouseName}\r\n                        flex={1}\r\n                        disabled={handleToggleDisabledInput()}\r\n                        error={(errors.spouseName?.length !== 0 && errors.spouseName !== undefined) && touched.spouseName}\r\n                        msgerror={errors.spouseName}\r\n                    />\r\n                </Column>\r\n                <Column />\r\n            </Row>\r\n            <Row\r\n                justifycontent=\"flex-end\"\r\n            >\r\n                <Column\r\n                    justifycontent=\"flex-start\"\r\n                >\r\n                    <LinkButton\r\n                        to=\"/\"\r\n                        label=\"Cancel\"\r\n                        bgcolor=\"#989898\"\r\n                        bgcolorhover=\"#807f7f\"\r\n                    />\r\n                </Column>\r\n                <Column\r\n                    justifycontent=\"flex-end\"\r\n                >\r\n                    <Button\r\n                        label={labelButton}\r\n                        bgcolor=\"#F79028\"\r\n                        bgcolorhover=\"#e08427\"\r\n                        type=\"submit\"\r\n                    />\r\n                </Column>\r\n            </Row>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default AddForm;","import React from 'react';\r\n\r\nimport { Container, Content } from './styles';\r\nimport PageHeader from '../../components/pageheader';\r\nimport AddForm from '../../components/addform';\r\n\r\nconst CreateLeadPage = () => {\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <PageHeader title=\"Register a Lead\"/>\r\n                <AddForm/>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CreateLeadPage;","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport ListLeadPage from './pages/listleadpage';\r\nimport CreateLeadPage from './pages/createleadpage';\r\n\r\nfunction Routes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Route path=\"/\" exact={true} component={ListLeadPage} />\r\n            <Route path=\"/add\" component={CreateLeadPage} />\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React, { } from 'react';\nimport GlobalStyle from './global';\nimport Routes from './routes';\nimport LeadsProvider from './context/Leads';\n\nfunction App() {\n  return (\n    <LeadsProvider>\n      <div className=\"App\">\n        <GlobalStyle />\n        <Routes />\n      </div>\n    </LeadsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n ","module.exports = __webpack_public_path__ + \"static/media/logo.7fdc93a9.svg\";"],"sourceRoot":""}